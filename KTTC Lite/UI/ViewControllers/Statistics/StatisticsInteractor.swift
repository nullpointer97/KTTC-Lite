//
//  StatisticsInteractor.swift
//  KTTC Lite
//
//  Created by –Ø—Ä–æ—Å–ª–∞–≤ –°—Ç—Ä–µ–ª—å–Ω–∏–∫–æ–≤ on 26.10.2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import Foundation
import ObjectMapper

public enum StatType {
    case wn6
    case wn7
    case wn8
    case eff
    case xwn8
    case winrate
    case xte
    case battles
    case damage
    case frags
}

public typealias WN6 = Double
public typealias WN7 = Double
public typealias WN8 = Double
public typealias EFF = Double
public typealias xTE = Double

struct WN6CalculateData {
    var DAMAGE_DEAULT: Double
    var SPOTTED: Double
    var FRAGS: Double
    var DROPPED_CAPTURE_POINTS: Double
    var WIN_RATE: Double
    var AVERAGE_LEVEL: Double
    var BATTLES: Double = 0
}

struct WN8CalculateData {
    var DAMAGE_DEAULT: Double
    var SPOTTED: Double
    var FRAGS: Double
    var DROPPED_CAPTURE_POINTS: Double
    var WIN_RATE: Double
    var WINS: Double = 0
    var BATTLES: Double = 0
    var ID: Int
}

struct EFFCalculateData {
    var AVERAGE_LEVEL: Double
    var DAMAGE_DEAULT: Double
    var SPOTTED: Double
    var FRAGS: Double
    var DROPPED_CAPTURE_POINTS: Double
    var CAP: Double
}

final class StatisticsInteractor {
    let api: KTTCApi = KTTCApi()

    weak var presenter: StatisticsPresenterInterface?
    
    var existTanks: [Int] = []
    var calcData: [WN8CalculateData] = []
    var expCalcData: [WN8CalculateData] = []
    var averageData: WN8CalculateData?
}

// MARK: - Extensions -

extension StatisticsInteractor: StatisticsInteractorInterface {
    func eraseAll() {
        print("Called \(#function)")
        existTanks.erase()
        calcData.erase()
        expCalcData.erase()
        averageData = nil
    }
    
    func getStatistics<T: Mappable>(with model: T.Type, with accountId: Int, from gameType: KTTCApi.GameType) {
        print("Called \(#function)")
        DispatchQueue.global(qos: .userInteractive).sync { [weak self] in
            guard let self = self else { return }
            self.eraseAll()
            self.api.request(with: UserInfo<AnyData<AnyUserData>>.self, gameType: gameType, .account, .info, [.accountId: "\(accountId)"]).start { userInfo in
                if let all = userInfo.data?.data?.statistics?.all {
                    let damage = all["damage_dealt"] ?? 0
                    let battles = all["battles"] ?? 0
                    let spotted = all["spotted"] ?? 0
                    let frags = all["frags"] ?? 0
                    let wins = all["wins"] ?? 0
                    let maxFrags = all["max_frags"] ?? 0
                    let def = all["dropped_capture_points"] ?? 0
                    let xp = all["xp"] ?? 0
                    let cap = all["capture_points"] ?? 0
                    let hits = all["hits_percents"] ?? 0
                    let assist = all["avg_damage_assisted"] ?? 0
                    let maxDamage = all["max_damage"] ?? 0
                    
                    self.presenter?.formatter.needCalculateData.xp = xp ?? 0
                    self.presenter?.formatter.needCalculateData.damage = damage ?? 0
                    self.presenter?.formatter.needCalculateData.battles = battles ?? 0
                    self.presenter?.formatter.needCalculateData.spotted = spotted ?? 0
                    self.presenter?.formatter.needCalculateData.frags = frags ?? 0
                    self.presenter?.formatter.needCalculateData.wins = wins ?? 0
                    self.presenter?.formatter.needCalculateData.maxFrags = maxFrags ?? 0
                    self.presenter?.formatter.needCalculateData.def = def ?? 0
                    self.presenter?.formatter.needCalculateData.cap = cap ?? 0
                    self.presenter?.formatter.needCalculateData.hits = hits?.round(to: 2) ?? 0
                    self.presenter?.formatter.needCalculateData.assist = assist?.round(to: 2) ?? 0
                    self.presenter?.formatter.needCalculateData.maxDamage = maxDamage?.round(to: 2) ?? 0
                    
                    self.averageData = WN8CalculateData(DAMAGE_DEAULT: damage ?? 0, SPOTTED: spotted ?? 0, FRAGS: frags ?? 0, DROPPED_CAPTURE_POINTS: def ?? 0, WIN_RATE: ((wins ?? 0) / (battles ?? 0) * 100).round(to: 2), WINS: wins ?? 0, BATTLES: battles ?? 0, ID: 0)
                }
            } error: { error in
                let errorMessage = error.userInfo["NSLocalizedDescription"] as? String
                self.presenter?.view.error(withMessage: errorMessage ?? "")
            } completed: {
                self.getAnotherInfo(with: model, accountId: accountId, from: gameType)
            }
        }
    }

    func getAnotherInfo<T: Mappable>(with model: T.Type, accountId: Int, from gameType: KTTCApi.GameType) {
        print("Called \(#function)")
        api.request(with: UserInfo<AnyData<T>>.self, gameType: gameType, .tanks, .stats, [.accountId: "\(accountId)"]).start { [weak self] userInfo in
            guard let self = self else { return }
            userInfo.data?.dataArray?.forEach { anyValue in
                if let anyValue = anyValue as? AllStatistics {
                    if let all = anyValue.all {
                        self.calcData.append(WN8CalculateData(DAMAGE_DEAULT: Double(all["damage_dealt"] ?? 0), SPOTTED: Double(all["spotted"] ?? 0), FRAGS: Double(all["frags"] ?? 0), DROPPED_CAPTURE_POINTS: Double(all["dropped_capture_points"] ?? 0), WIN_RATE: (Double(all["wins"] ?? 0) / Double(all["battles"] ?? 0)) * 100, BATTLES: Double(all["battles"] ?? 0), ID: anyValue.tankId ?? 0))
                    }
                    if let id = anyValue.tankId {
                        self.existTanks.append(id)
                    }
                }
            }
        } error: { [weak self] error in
            guard let self = self else { return }
            let errorMessage = error.userInfo["NSLocalizedDescription"] as? String
            self.presenter?.view.error(withMessage: errorMessage ?? "")
        } completed: { [weak self] in
            guard let self = self else { return }
            self.getExpectedValues()
            self.getTanksInfo(blitz: gameType == .blitz)
            
            if let needCalculateData = self.presenter?.formatter.needCalculateData {
                self.getWN6(data: WN6CalculateData(DAMAGE_DEAULT: needCalculateData.avgDamage, SPOTTED: needCalculateData.avgSpotted, FRAGS: needCalculateData.avgFrags, DROPPED_CAPTURE_POINTS: needCalculateData.avgDef, WIN_RATE: needCalculateData.winrate, AVERAGE_LEVEL: needCalculateData.averageLevel, BATTLES: needCalculateData.battles))
                
                self.getWN7(data: WN6CalculateData(DAMAGE_DEAULT: needCalculateData.avgDamage, SPOTTED: needCalculateData.avgSpotted, FRAGS: needCalculateData.avgFrags, DROPPED_CAPTURE_POINTS: needCalculateData.avgDef, WIN_RATE: needCalculateData.winrate, AVERAGE_LEVEL: needCalculateData.averageLevel, BATTLES: needCalculateData.battles))
                
                self.getWN8(averageData: self.averageData, currentData: self.calcData, expData: self.expCalcData)
                
                self.getEFF(data: EFFCalculateData(AVERAGE_LEVEL: needCalculateData.averageLevel, DAMAGE_DEAULT: needCalculateData.avgDamage, SPOTTED: needCalculateData.avgSpotted, FRAGS: needCalculateData.avgFrags, DROPPED_CAPTURE_POINTS: needCalculateData.avgDef, CAP: needCalculateData.avgCap))
                
                self.presenter?.formatter.finish()
            }
        }
    }
    
    func getTanksInfo(blitz: Bool = false) {
        print("Called \(#function)")
        let list = getTanksList(blitz: blitz)?.data?.dataArray
        var levelSum = 0
        let playerTanks = list?.filter { firstElement in
            existTanks.contains { secondElement in
                return firstElement.tankId == secondElement
            }
        }
        for tank in playerTanks ?? [] {
            levelSum += tank.tier ?? 0
        }
        presenter?.formatter.needCalculateData.averageLevel = Double(levelSum) / Double(playerTanks?.count ?? 0)
    }

    func getExpectedValues() {
        print("Called \(#function)")
        Constants.expectedValues.forEach { data in
            if let id = data.idNum, existTanks.contains(id) {
                expCalcData.append(WN8CalculateData(DAMAGE_DEAULT: Double(data.expDamage ?? 0), SPOTTED: Double(data.expSpot ?? 0), FRAGS: Double(data.expFrag ?? 0), DROPPED_CAPTURE_POINTS: Double(data.expDef ?? 0), WIN_RATE: Double(data.expWinRate ?? 0), ID: id))
            }
        }
        calcData = calcData.filter { firstElement in
            expCalcData.contains { secondElement in
                return firstElement.ID == secondElement.ID
            }
        }
    }
    
    func getTanksList(blitz: Bool = false) -> UserInfo<Data<Tank>>? {
        print("Called \(#function)")
        do {
            if let tanksJSON = Bundle.main.url(forResource: blitz ? "BlitzTanksList" : "TanksList", withExtension: "json") {
                let data = try Foundation.Data(contentsOf: tanksJSON)
                let string = String(data: data, encoding: .utf8)
                let model = Mapper<UserInfo<Data<Tank>>>().map(JSONString: string ?? "")
                return model
            } else {
                print("File not found")
                return nil
            }
        } catch {
            print(error)
            return nil
        }
    }
    
    private func getWN6(data: WN6CalculateData?) {
        print("Called \(#function)")
        if let wn6Data = data {
            var wn6 = (1240 - 1040 / pow(min(wn6Data.AVERAGE_LEVEL, 6), 0.164)) * wn6Data.FRAGS
            wn6 += wn6Data.DAMAGE_DEAULT * 530 / (184 * exp(0.24 * wn6Data.AVERAGE_LEVEL) + 130)
            wn6 += wn6Data.SPOTTED * 125
            wn6 += min(wn6Data.DROPPED_CAPTURE_POINTS, 2.2) * 100
            wn6 += ((185 / (0.17 + exp((wn6Data.WIN_RATE - 35) * -0.134))) - 500) * 0.45
            wn6 += (6 - min(wn6Data.AVERAGE_LEVEL, 6)) * -60
            
            presenter?.formatter.needCalculateData.wn6 = wn6
        }
    }
    
    private func getWN7(data: WN6CalculateData?) {
        print("Called \(#function)")
        if let wn7Data = data {
            var wn7 = (1240 - 1040 / pow(min(wn7Data.AVERAGE_LEVEL, 6), 0.164)) * wn7Data.FRAGS
            wn7 += wn7Data.DAMAGE_DEAULT * 530 / (184 * exp(0.24 * wn7Data.AVERAGE_LEVEL) + 130)
            wn7 += wn7Data.SPOTTED * 125 * min(wn7Data.AVERAGE_LEVEL, 3) / 3
            wn7 += min(wn7Data.DROPPED_CAPTURE_POINTS, 2.2) * 100
            wn7 += ((185 / (0.17 + exp((wn7Data.WIN_RATE - 35) * -0.134))) - 500) * 0.45
            wn7 += (-1 * (((5 - min(wn7Data.AVERAGE_LEVEL, 5)) * 125) / (1 + exp((wn7Data.AVERAGE_LEVEL - (wn7Data.BATTLES / pow(220, (3 / wn7Data.AVERAGE_LEVEL))) * 1.5)))))
            
            presenter?.formatter.needCalculateData.wn7 = wn7
        }
    }
    
    private func getWN8(averageData: WN8CalculateData?, currentData: [WN8CalculateData], expData: [WN8CalculateData]) {
        print("Called \(#function)")
        let current = currentData.sorted(by: { $0.ID < $1.ID })
        let expected = expData.sorted(by: { $0.ID < $1.ID })
        
        if let averageData = averageData {
            var expDamage: Double = 0
            var expSpotted: Double = 0
            var expFrags: Double = 0
            var expDef: Double = 0
            var expWin: Double = 0
            
            _ = expected.enumerated().compactMap { index, data in
                expDamage += (data.DAMAGE_DEAULT * current[index].BATTLES)
                expSpotted += (data.SPOTTED * current[index].BATTLES)
                expFrags += (data.FRAGS * current[index].BATTLES)
                expDef += (data.DROPPED_CAPTURE_POINTS * current[index].BATTLES)
                expWin += (0.01 * data.WIN_RATE * current[index].BATTLES)
            }

            let rDamage = averageData.DAMAGE_DEAULT / expDamage
            let rSpot = averageData.SPOTTED / expSpotted
            let rFrag = averageData.FRAGS / expFrags
            let rDef = averageData.DROPPED_CAPTURE_POINTS / expDef
            let rWin = averageData.WINS / expWin
            
            let rDamageC = max(0, (rDamage - 0.22) / (1 - 0.22))
            let rSpotC = max(0, min(rDamageC + 0.1, (rSpot - 0.38) / (1 - 0.38)))
            let rFragC = max(0, min(rDamageC + 0.2, (rFrag - 0.12) / (1 - 0.12)))
            let rDefC = max(0, min(rDamageC + 0.1, (rDef - 0.10) / (1 - 0.10)))
            let rWinC = max(0, (rWin - 0.71) / (1 - 0.71))
            
            var wn8 = 980 * rDamageC
            wn8 += 210 * rDamageC * rFragC
            wn8 += 155 * rFragC * rSpotC
            wn8 += 75 * rDefC * rFragC
            wn8 += 145 * min(1.8, rWinC)
            
            getxWN8(wn8: wn8)
            
            presenter?.formatter.needCalculateData.wn8 = wn8
        }
    }
    
    private func getEFF(data: EFFCalculateData?) {
        print("Called \(#function)")
        if let effData = data {
            var eff = effData.DAMAGE_DEAULT * (10 / (effData.AVERAGE_LEVEL + 2)) * (0.204 + 2 * effData.AVERAGE_LEVEL / 100)
            eff += effData.FRAGS * 250
            eff += effData.SPOTTED * 150
            eff += logc(effData.CAP + 1, 1.732) * 150
            eff += effData.DROPPED_CAPTURE_POINTS * 150
            
            presenter?.formatter.needCalculateData.eff = eff
        }
    }
    
    private func getxWN8(wn8: WN8) {
        let XWN8: WN8
        if wn8 > 3650 {
            XWN8 = 100
        } else {
            let firstStep = -0.00000000000000000007656 * wn8 + 0.0000000000000014848
            let secondStep = wn8 * firstStep - 0.0000000000099633
            let threeStep = wn8 * secondStep + 0.00000002858
            let fourStep = wn8 * threeStep - 0.00003836
            let fiveStep = wn8 * fourStep + 0.0575
            let sixStep = wn8 * fiveStep - 0.99
            let min = min(sixStep, 100)
            XWN8 = max(min, 0)
        }
        
        presenter?.formatter.needCalculateData.xwn8 = XWN8
    }
}
